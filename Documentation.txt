# Project Name: WebSocket Performance Evaluation

## Overview

This documentation presents the results of a performance evaluation conducted on two Python WebSocket libraries/
frameworks: Trio and Asyncio. The goal of this evaluation is to compare the scalability, latency, throughput, and
resource utilization of these libraries in a controlled test environment.

## Test Environment

**Hardware Details:**
- **CPU:** Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz   2.30 GHz
- **RAM:** 16GB
- **Operating System:** Windows 10
- **Number of Cores Utilized:** 1 (in adherence to the case study instructions)
- **Number of Cores 8
- **Number of Threads Utilized:** 1 (in adherence to the case study instructions)
- **I executed the code within a Conda environment, utilizing only the necessary libraries, and using Python 3.8.

### Test Setup
- Data Type/Size Streamed: [Total Data Size: 240000 bytes. Type: String]

## Libraries Overview

### Trio

**Introduction:**
Trio is an asynchronous I/O library for Python that is designed with a focus on simplicity and correctness. It provides
a more intuitive and reliable way to write concurrent code compared to traditional callback-based approaches. Trio aims
to make it easier for developers to reason about their code and handle concurrency in a natural and readable manner.

**Key Goals:**
- Simplicity: Trio is designed to be easy to use and understand, minimizing the complexity of asynchronous programming.
- Correctness: Trio emphasizes correctness, aiming to eliminate common pitfalls and provide a clear model for handling
  concurrency.
- Reliability: The library is built to be reliable and robust, helping developers write code that is less prone to bugs
  related to concurrency.

### Asyncio

**Introduction:**
Asyncio is a library in Python that provides infrastructure for writing single-threaded concurrent code using coroutines,
multiplexing I/O access over sockets and other resources. It is a part of the Python standard library and has been
introduced to address the challenges of asynchronous programming. Asyncio allows developers to write asynchronous code
using the async/await syntax.

**Key Goals:**
- Asynchronous Programming: Asyncio enables asynchronous programming in Python, allowing developers to write code that
  can perform multiple tasks concurrently without blocking the execution.
- Event Loop: Asyncio is based on an event loop model, where coroutines are scheduled to run on an event loop, and I/O
  operations can be performed concurrently without waiting for each to complete.
- Interoperability: Asyncio is designed to be interoperable with other asynchronous libraries, providing a common
  foundation for asynchronous programming in Python.

## Test Cases

### Latency Measurement
[Details of the latency measurement test.]
Trio:Latency: 0.0059227943 seconds
Asyncio:Latency: 0.000000000000000 seconds

### Throughput Measurement
[Details of the throughput measurement test.]
Trio:
Throughput: 25252.1662 messages per second
Total Data Size: 240000 bytes
Time Spent: 0.40 seconds

Asyncio:
Throughput: 44345.2675 messages per second
Total Data Size: 240000 bytes
Time Spent: 0.23 seconds


### Resource Utilization Measurement
[Details of the resource utilization measurement test.]
Trio:
CPU Usage: 9.1% | Memory Usage: 69.3%
CPU Usage: 4.5% | Memory Usage: 69.3%

Asyncio:
CPU Usage: 2.9% | Memory Usage: 61.4%
CPU Usage: 4.2% | Memory Usage: 61.7%
CPU Usage: 6.0% | Memory Usage: 62.0%


### Scalability Test
[Details of the scalability test.]
100Clients waits for 20 message from server.(it takes minimum 19 seconds since my server gives data in every 1 second.
Therefore, they wait 19 seconds minimum for 20 messages.)

Trio: 19.27 seconds.
Asyncio: 19.30 seconds

## Conclusion

Conclusion
Latency Measurement
In the latency measurement test, Trio demonstrated a latency of 0.0059 seconds, while Asyncio showed an impressively low
 latency of 0.000000000000000 seconds. Asyncio appears to have a slight advantage in this specific aspect.

Throughput Measurement
For throughput measurement, Trio achieved a throughput of 25,252.1662 messages per second, with a total data size of
240,000 bytes, and it took 0.40 seconds. On the other hand, Asyncio outperformed with a higher throughput of 44,345.2675
messages per second, the same total data size, and a faster execution time of 0.23 seconds. Asyncio demonstrates
superior performance in terms of throughput efficiency.

Resource Utilization Measurement
In the resource utilization test, Trio exhibited an average CPU usage of 6.8% and an average memory usage of 69.3%.
Asyncio, however, displayed a lower average CPU usage of 4.4% and a slightly lower memory usage ranging from 61.4% to
62.0%. Asyncio seems to be more resource-efficient, consuming fewer CPU and memory resources during the test.

Scalability Test
During the scalability test where 100 clients waited for 20 messages from the server, both Trio and Asyncio showed
similar performance, completing the task in approximately 19.27 seconds for Trio and 19.30 seconds for Asyncio. The
scalability test indicates that both libraries handle a significant number of clients and messages efficiently without a
substantial difference in performance.

In conclusion, the choice between Trio and Asyncio depends on the specific requirements of the project. Asyncio
showcases lower latency, higher throughput, and slightly better resource utilization, making it suitable for scenarios
prioritizing these factors. Trio, while exhibiting slightly higher latency and lower throughput, still performs well and
may be preferred for projects that value simplicity and ease of use.